{
  "info": {
    "_postman_id": "verocta-ai-complete-api-collection",
    "name": "\ud83d\ude80 VeroctaAI Complete API Collection",
    "description": "# \ud83e\udd16 VeroctaAI - AI-Powered Financial Intelligence Platform\n\n**Complete API Collection for Production & Development**\n\n## \ud83c\udfaf Quick Start\n1. **Import this collection** into Postman\n2. **Import the environment** file (VeroctaAI-Environment.json)\n3. **Set your base_url** in environment (local or production)\n4. **Start with Authentication** \u2192 Register/Login\n5. **Test endpoints** - tokens are managed automatically!\n\n## \ud83c\udf10 Base URLs\n- **Production**: `https://veroctaai.onrender.com`\n- **Local Development**: `http://localhost:8001`\n\n## \ud83d\udd10 Authentication\n- **JWT-based** authentication with automatic token refresh\n- **Auto-login** - tokens are stored automatically after login\n- **Token refresh** - handles expired tokens seamlessly\n\n## \ud83d\udcca Features Covered\n\u2705 **Authentication** - Register, Login, Profile management\n\u2705 **File Upload** - CSV processing with AI analysis\n\u2705 **Financial Analysis** - SpendScore calculations\n\u2705 **Reports** - Create, view, download PDF reports\n\u2705 **Dashboard** - Analytics and statistics\n\u2705 **SaaS Platform** - Billing, notifications, monitoring\n\n## \ud83e\uddea Testing Notes\n- All requests include **automatic tests**\n- **Environment variables** are set automatically\n- **Error handling** and **response validation** included\n- **Sample data** provided for easy testing\n\n## \ud83d\udcde Support\n- GitHub: https://github.com/jobayehoque/VeroctaAI-Backend\n- Docs: /api/docs\n- Health: /api/health\n\n**\ud83d\udd04 Last Manual Sync**: 2025-09-28 09:26:03 UTC\n**\ud83d\udcc2 Repository**: jobayehoque/VeroctaAI-Backend\n**\ud83c\udf3f Branch**: main",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_collection_link": "https://github.com/jobayehoque/VeroctaAI-Backend",
    "_exporter_id": "verocta-ai-team",
    "_postman_exported_at": "2025-09-28T09:26:03.569736Z"
  },
  "item": [
    {
      "name": "01 - Authentication",
      "item": [
        {
          "name": "\ud83d\udd10 Register New User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for testing",
                  "const timestamp = Date.now();",
                  "pm.environment.set('test_email', `apitest${timestamp}@example.com`);",
                  "console.log('Generated test email:', pm.environment.get('test_email'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"\u2705 Registration - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"\u2705 Registration - Access token received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    pm.environment.set(\"access_token\", jsonData.access_token);",
                  "    console.log('\u2705 Access token set:', jsonData.access_token.substring(0, 20) + '...');",
                  "    ",
                  "    if (jsonData.refresh_token) {",
                  "        pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
                  "        console.log('\u2705 Refresh token set');",
                  "    }",
                  "    if (jsonData.user && jsonData.user.id) {",
                  "        pm.environment.set(\"user_id\", jsonData.user.id);",
                  "        console.log('\u2705 User ID set:', jsonData.user.id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"\u2705 Registration - Success response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.be.a('string');",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"\u2705 Registration - User data complete\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.email).to.eql(pm.environment.get('test_email'));",
                  "    pm.expect(jsonData.user.first_name).to.be.a('string');",
                  "    pm.expect(jsonData.user.company).to.be.a('string');",
                  "});",
                  "",
                  "// Log success",
                  "if (pm.response.code === 200) {",
                  "    console.log('\ud83c\udf89 User registration successful!');",
                  "    console.log('\ud83d\udce7 Email:', pm.environment.get('test_email'));",
                  "    console.log('\ud83c\udfe2 Company:', pm.environment.get('company_name'));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON content type"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"company\": \"{{company_name}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "description": "Register a new user account with VeroctaAI. This endpoint creates a new user and returns JWT tokens for authentication.\n\n**Request Body:**\n- `email`: User's email address (required)\n- `password`: User's password (required)\n- `first_name`: User's first name (optional)\n- `last_name`: User's last name (optional)\n- `company`: User's company name (optional)\n\n**Response:**\n- `success`: Boolean indicating success\n- `access_token`: JWT access token\n- `refresh_token`: JWT refresh token\n- `user`: User object with profile information"
          },
          "response": [
            {
              "name": "\u2705 Successful Registration",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"securePassword123\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"company\": \"Example Corp\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"User registered successfully\",\n  \"user\": {\n    \"id\": \"uuid-here\",\n    \"email\": \"test@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"company\": \"Example Corp\",\n    \"role\": \"user\",\n    \"created_at\": \"2024-01-15T10:30:00Z\"\n  },\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n  \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n}"
            }
          ]
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Login successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store tokens",
                  "    pm.environment.set(\"access_token\", jsonData.access_token);",
                  "    if (jsonData.refresh_token) {",
                  "        pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
                  "    }",
                  "    if (jsonData.user && jsonData.user.id) {",
                  "        pm.environment.set(\"user_id\", jsonData.user.id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"User object present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    pm.expect(jsonData.user.email).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data retrieved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.user).to.be.an('object');",
                  "    pm.expect(jsonData.user.email).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"New token received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    pm.environment.set(\"access_token\", jsonData.access_token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{refresh_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "refresh"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logout successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "logout"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "02 - Health & System",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"System is healthy\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test(\"Services status available\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.services).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "health"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "03 - File Upload",
      "item": [
        {
          "name": "\ud83d\udcc1 Upload CSV File for Analysis",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Create sample CSV data for testing if no file is selected",
                  "console.log('\ud83d\udcc1 Preparing file upload for financial analysis...');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"\u2705 Upload - Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"\u2705 Upload - File processed successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    ",
                  "    if (jsonData.report_id) {",
                  "        pm.environment.set(\"last_report_id\", jsonData.report_id);",
                  "        console.log('\ud83d\udcca Report ID saved:', jsonData.report_id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"\u2705 Upload - Analysis data present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.analysis) {",
                  "        pm.expect(jsonData.analysis).to.be.an('object');",
                  "        ",
                  "        if (jsonData.analysis.spend_score) {",
                  "            pm.expect(jsonData.analysis.spend_score).to.be.a('number');",
                  "            console.log('\ud83d\udcaf Spend Score:', jsonData.analysis.spend_score);",
                  "        }",
                  "        ",
                  "        if (jsonData.analysis.total_amount) {",
                  "            console.log('\ud83d\udcb0 Total Amount:', jsonData.analysis.total_amount);",
                  "        }",
                  "        ",
                  "        if (jsonData.analysis.transaction_count) {",
                  "            console.log('\ud83d\udcc8 Transactions:', jsonData.analysis.transaction_count);",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"\u2705 Upload - AI insights available\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.analysis && jsonData.analysis.ai_insights) {",
                  "        pm.expect(jsonData.analysis.ai_insights).to.be.an('object');",
                  "        console.log('\ud83e\udd16 AI Analysis completed successfully!');",
                  "    }",
                  "});",
                  "",
                  "// Log success message",
                  "if (pm.response.code === 200) {",
                  "    console.log('\ud83c\udf89 File upload and analysis completed!');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": "Accept JSON response"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "description": "\ud83d\udcc1 CSV file to upload\n\n**Supported formats:**\n- QuickBooks CSV export\n- Wave Accounting CSV\n- Revolut Business CSV  \n- Xero CSV export\n- Generic CSV (Date, Description, Amount columns)\n\n**Sample CSV content:**\n```\nDate,Description,Amount,Category\n2024-01-15,Office supplies,150.00,Office\n2024-01-16,Software license,299.99,Software\n2024-01-17,Business travel,450.00,Travel\n```\n\n**File requirements:**\n- Max size: 16MB\n- Format: CSV only\n- Encoding: UTF-8",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "company_name",
                  "value": "{{company_name}}",
                  "description": "Your company name for the report",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Financial analysis from Postman API test",
                  "description": "Description for this analysis report",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/upload",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "upload"
              ]
            },
            "description": "Upload a CSV file for AI-powered financial analysis. This endpoint processes expense data and generates SpendScore analysis with insights.\n\n**Form Data:**\n- `file`: CSV file (required, max 16MB)\n- `company_name`: Company name for the report (optional)\n- `description`: Report description (optional)\n\n**Response:**\n- `success`: Boolean indicating success\n- `report_id`: Unique identifier for the generated report\n- `analysis`: Analysis results including SpendScore, totals, and AI insights\n\n**AI Features:**\n- SpendScore calculation (0-100)\n- Category analysis and optimization\n- Spending pattern detection\n- Cost-saving recommendations\n- Anomaly detection"
          },
          "response": [
            {
              "name": "\u2705 Successful File Analysis",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/sample_expenses.csv"
                    },
                    {
                      "key": "company_name",
                      "value": "Test Company",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "Q1 2024 Expense Analysis",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/api/upload",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "upload"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"File processed successfully\",\n  \"report_id\": \"uuid-here\",\n  \"analysis\": {\n    \"spend_score\": 78,\n    \"total_amount\": 15420.50,\n    \"transaction_count\": 145,\n    \"date_range\": {\n      \"start\": \"2024-01-01\",\n      \"end\": \"2024-01-31\"\n    },\n    \"categories\": {\n      \"Office Supplies\": 2340.50,\n      \"Marketing\": 5100.00,\n      \"Software\": 1980.00,\n      \"Travel\": 6000.00\n    },\n    \"ai_insights\": {\n      \"key_findings\": [\n        \"High spending on travel expenses suggests potential cost optimization\",\n        \"Office supplies show consistent monthly patterns\",\n        \"Software subscriptions could be consolidated\"\n      ],\n      \"recommendations\": [\n        \"Consider negotiating volume discounts for travel\",\n        \"Audit software subscriptions for duplicates\",\n        \"Implement expense approval workflow\"\n      ],\n      \"potential_savings\": 1850.00\n    }\n  }\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "04 - Reports",
      "item": [
        {
          "name": "List Reports",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Reports data structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.reports).to.be.an('array');",
                  "    if (jsonData.pagination) {",
                  "        pm.expect(jsonData.pagination).to.be.an('object');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/reports?page=1&limit=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "reports"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Report Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Report details present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.report).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/reports/{{last_report_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "reports",
                "{{last_report_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Report created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    if (jsonData.report_id) {",
                  "        pm.environment.set(\"last_report_id\", jsonData.report_id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Manual Report\",\n  \"company\": \"Test Company\",\n  \"description\": \"Manually created test report\",\n  \"data_source\": \"manual\",\n  \"transactions\": [\n    {\n      \"date\": \"2024-01-15\",\n      \"description\": \"Office supplies\",\n      \"amount\": 150.00,\n      \"category\": \"Office\"\n    },\n    {\n      \"date\": \"2024-01-16\",\n      \"description\": \"Software subscription\",\n      \"amount\": 99.99,\n      \"category\": \"Software\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/reports",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "reports"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Download PDF Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"PDF content type\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/reports/{{last_report_id}}/pdf",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "reports",
                "{{last_report_id}}",
                "pdf"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Report deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/reports/{{last_report_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "reports",
                "{{last_report_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "05 - Analytics",
      "item": [
        {
          "name": "Spend Score Analysis",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Spend score data present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    if (jsonData.spend_score) {",
                  "        pm.expect(jsonData.spend_score).to.be.an('object');",
                  "        if (jsonData.spend_score.overall_score) {",
                  "            pm.expect(jsonData.spend_score.overall_score).to.be.a('number');",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/spend-score?period=month",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "spend-score"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "month"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Dashboard Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Dashboard stats structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.stats).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/dashboard/stats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "dashboard",
                "stats"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Advanced Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Advanced analytics data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    if (jsonData.analytics) {",
                  "        pm.expect(jsonData.analytics).to.be.an('object');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/analytics/advanced?start_date=2024-01-01&end_date=2024-03-31&include_predictions=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "analytics",
                "advanced"
              ],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01"
                },
                {
                  "key": "end_date",
                  "value": "2024-03-31"
                },
                {
                  "key": "include_predictions",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "06 - User Management",
      "item": [
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"Updated\",\n  \"last_name\": \"User\",\n  \"company\": \"Updated Corporation\",\n  \"phone\": \"+1-555-0123\",\n  \"preferences\": {\n    \"currency\": \"USD\",\n    \"timezone\": \"America/New_York\",\n    \"notifications\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "profile"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Change Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password changed successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"current_password\": \"{{test_password}}\",\n  \"new_password\": \"newSecurePassword456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/change-password",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "change-password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User analytics data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    if (jsonData.user_analytics) {",
                  "        pm.expect(jsonData.user_analytics).to.be.an('object');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/analytics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "analytics"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "07 - SaaS Platform APIs",
      "item": [
        {
          "name": "Analytics Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Analytics overview data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v2/analytics/overview",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v2",
                "analytics",
                "overview"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Billing Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Billing information present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.billing).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v2/billing/current",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v2",
                "billing",
                "current"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Notifications data structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.notifications).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v2/notifications",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v2",
                "notifications"
              ]
            }
          },
          "response": []
        },
        {
          "name": "System Monitoring",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"System monitoring data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.system_status).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v2/monitoring/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v2",
                "monitoring",
                "status"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "function isTokenExpired(token) {",
          "    if (!token) return true;",
          "    try {",
          "        const payload = JSON.parse(atob(token.split('.')[1]));",
          "        const currentTime = Math.floor(Date.now() / 1000);",
          "        return payload.exp < currentTime;",
          "    } catch (e) {",
          "        return true;",
          "    }",
          "}",
          "",
          "const accessToken = pm.environment.get('access_token');",
          "const refreshToken = pm.environment.get('refresh_token');",
          "",
          "if (accessToken && refreshToken && isTokenExpired(accessToken)) {",
          "    console.log('Access token expired, refreshing...');",
          "    pm.sendRequest({",
          "        url: pm.environment.get('base_url') + '/api/auth/refresh',",
          "        method: 'POST',",
          "        header: {",
          "            'Authorization': 'Bearer ' + refreshToken",
          "        }",
          "    }, function (err, response) {",
          "        if (!err && response.json().success) {",
          "            pm.environment.set('access_token', response.json().access_token);",
          "            console.log('Token refreshed successfully');",
          "        } else {",
          "            console.log('Token refresh failed:', err || response.json());",
          "        }",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test for all endpoints",
          "pm.test(\"Response time is less than 5000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test(\"Response has proper JSON structure\", function () {",
          "    pm.response.to.be.json;",
          "    var jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}",
      "type": "string"
    }
  ]
}